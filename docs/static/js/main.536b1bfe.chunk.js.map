{"version":3,"sources":["id_rsa.pub.tsx","App.tsx","example.tsx","reportWebVitals.ts","index.tsx"],"names":["pubkey","checkKey","message","publicKeyString","a","length","Error","openpgp","cleartextMessage","signedMessageAsync","publicKeyAsync","armoredKey","Promise","all","signedMessage","publicKey","verifyOptions","verificationKeys","expectSigned","result","signatures","verified","PGPState","console","log","error","getResultView","state","Hidden","Loading","className","src","Verified","Failed","App","useState","setMessage","undefined","setResult","useEffect","then","catch","err","onChange","evt","target","value","autoFocus","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.536b1bfe.chunk.js","sourcesContent":["export const pubkey = `-----BEGIN PGP PUBLIC KEY BLOCK-----\n\n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\nh3/h/j8KIkpVMB2Vhw==\n=/MVQ\n-----END PGP PUBLIC KEY BLOCK-----\n`;","import React from 'react';\nimport { FC, ReactElement, useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { pubkey } from './id_rsa.pub';\nimport { validExample, invalidExample } from './example';\nimport * as openpgp from 'openpgp';\n\nasync function checkKey(message: string, publicKeyString: string) : Promise<boolean> {\n  if (!message || message.length === 0) {\n    throw new Error(\"Message is empty\");\n  }\n  let signedMessageAsync = await openpgp.readCleartextMessage({ cleartextMessage: message });\n  let publicKeyAsync = openpgp.readKey({ armoredKey: publicKeyString });\n  let [signedMessage, publicKey] = await Promise.all([signedMessageAsync, publicKeyAsync]);\n  let verifyOptions: any = {\n      message: signedMessage,\n      verificationKeys: publicKey,\n      expectSigned: true\n  };\n  let result = await openpgp.verify(verifyOptions);\n  return await result.signatures[0].verified;\n}\n\nvar msg = `\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nProof of 1F35C GitHub User Ownership\nSigned for: ABC\nDate:Thu, 16 Dec 2021 00:30:34 GMT\n-----BEGIN PGP SIGNATURE-----\n\nwsFzBAEBCAAGBQJhuoiqACEJEAewVL2K4IIUFiEEO0G9ic1OqZ/j/7ZHB7BU\nvYrgghRkzxAAmwuLOWhwQmsKhoyLEbl84dedim1cX2spOOWk4cVwzuYstyza\n7EPW2txXGwEqGk8jgN+rEAaac9EFPLqBIn+PI+ukKx0l3K9GUzvYYBHTU3QF\nkECqHPsfmJCoF54Ce30fLoIkN/PxmJVBDrWlhJ0ORURRGKntGaX0WC8iDVBL\n+k3wBjYEtFpB2S8FYUA/ZWB2HPaKb0tNCsf2xjPNlgfHsme6OfV5Qo2t7Hu6\n8cHsOfOypwIO6+sDK0HGpPfb6htW55K/xRsJuxYvEw0ySamcQz3Q+CDPiydR\nEOgz8PqW+ubgJN6ydCyCsx/mG6KfFSvIqzo2iJdhb7pJtKc/3yFftVhQT9uO\n1wW77+vUEYDfjqBIESyWxxOMu4HKjHiPqRuWaIuf7jwc1hXGYNc/xR4/nkdt\nGkOQs+8t/sBC2Le2/JYbBhV+YCIX5GmT7O61repBLyOpClmJNeKndjBXi90K\ngB2M73DAGA9awglyJ/8//n5bkjuAoLx1NgFbc2qadcVvti0xL7GT8PEBTa6W\nK8N0DO20m7ZNdvMp2Y/3GyVhTUiOhka8QfoEQJGBWHLPJQnim7sCFYACKyie\nBWfO5+se4urGfJG1FfPHd791vOlKTe2gPQcig3xC6x1VFDb7OFyrmzdw/K6+\nvoeAecfg1DvkkipjAl7RLnqwRzh/KgLBlQk=\n=6nuz\n-----END PGP SIGNATURE-----\n`;\n\nvar msg_error = `\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nProof of 1F35C GitHub User Ownership\nSigned for: ABC\nDate:Thu, 16 Dec 2021 00:27:44 GMT\n-----BEGIN PGP SIGNATURE-----\n\nwsFzBAEBCAAGBQJhuogAACEJECPOE7yfPkrZFiEEnKKyrnlckw7SKRSKI84T\nvJ8+StktLRAAmuYXgCdF7DcbjBNoEJuvJSVM/2Tx+IBoaO/3ohMvEIo6cUkM\nCbxtrqY+trBZN304Z6Rt0QTD1+P3p4AWUaXvHsdb/nkSzBbAojGSLiMpUY2y\nVCiX0sZFs6PQbFULbglVobLq9TwAnubWgtTPxV8/1W6wztBVSyEsh0YXN+Qr\nAtuYfZTzBT4qtXFJllOqITC/ShV+rhi/K8EeTa3XyN6D701ycqxlW+mdi/PY\n8nRivqk6Kv6BkH0dFlIi/IPdaNmUQGYR3wbENW5uR5gaXSTRJDnR2rlTSGMP\nT88vs9l3l7zv2LS3xxxnuF5Z4iBiXM1aANqe7l4vbJ4dPrx1mzkugozaS8Sh\nNSBmkMds8PmHYADa3QnW/iGqXYTVXKMMJfH94Z3mENXjyFaZmHOp+o9OcOpF\nBRqN/ADN+cHvaFYgEMpAKdtNVe0vYUUewBvmA+7jX3uSPKaTORj75l2WCPzl\nfK7o+wtwpAqme+bhJsTKg7c54xKFKtp9WLRWfj/8hjPByj9cBeSsvPCUBb+s\n6nOH7yTp29MQu/Um2Ub0liC4TIuyIzDGwu9sCxWsCwuBrV5UcPt5nxmOf9CK\ntDYb9YrWPtC4Do3uVOP4G9SlHVuj3hyYcywVyHnu8ej7S95Yh6ksNWpeDWSF\nfZCzhASsUl6WZSKZDSPOGV5z6WbZifJbnEA=\n=ppKB\n-----END PGP SIGNATURE-----\n`;\n\n(async() => {\n  try {\n    console.log(await checkKey(msg, pubkey));\n  } catch(err) {\n    console.error(err);\n  }\n})();\n\nenum PGPState {\n  Hidden,\n  Loading,\n  Verified,\n  Failed\n};\n\ntype PGPResult = {\n  state: PGPState;\n  error: string | undefined;\n};\n\nconst Loading = (): JSX.Element => {\n  return (\n    <div className=\"box-section centered loading\">\n      <img className=\"icon\" src=\"stopwatch.svg\" />\n      <br />\n      <span className=\"status\">\n        Loading...\n      </span>\n    </div>\n  );\n};\n\nconst Verified = (): JSX.Element => {\n  return (\n    <div className=\"box-section centered loading\">\n      <img className=\"icon\" src=\"success.svg\" />\n      <br />\n      <span className=\"status\">\n        Verified\n      </span>\n    </div>\n  );\n}\n\nconst Failed = ({ error } : { error: string }): JSX.Element => {\n  return (\n    <div className=\"box-section centered loading\">\n      <img className=\"icon\" src=\"error.svg\" />\n      <br />\n      <span className=\"status\">\n        Verification Failed\n      </span>\n      <br />\n      <span className=\"detail\">\n        { error }\n      </span>\n    </div>\n  );\n}\n\nfunction getResultView(result: PGPResult): JSX.Element {\n  switch (result.state) {\n    case PGPState.Hidden:\n      return (<div />);\n    case PGPState.Loading:\n      return Loading();\n      break;\n    case PGPState.Verified:\n      return Verified();\n      break;\n    case PGPState.Failed:\n      return Failed({ error: result.error ?? \"unknown\" });\n      break;\n  }\n}\n\nfunction App(): ReactElement {\n  let [message, setMessage] = useState<string>(\"\");\n  let [result, setResult] = useState<PGPResult>({ state: PGPState.Hidden, error: undefined });\n\n  useEffect(() => {\n    if (message === \"\") {\n      setResult({ state: PGPState.Hidden, error: undefined });\n    } else {\n      setResult({ state: PGPState.Loading, error: undefined });\n      checkKey(message, pubkey)\n          .then(() => {\n            setResult({ state: PGPState.Verified, error: undefined });\n          })\n          .catch((err) => {\n            setResult({ state: PGPState.Failed, error: err.message });\n          });\n    }\n  }, [message]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"box\">\n\t\t\t\t<div className=\"box-section\">\n\t\t\t\t\t<h1>Signature Verifier</h1>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"box-section\">\n\t\t\t\t\tPlease paste your signed signature below:\n\t\t\t\t\t<textarea className=\"signature-field\" onChange={ (evt) => { setMessage(evt.target.value); } } autoFocus={ true } value={ message } />\n          <button onClick={ () => { setMessage(validExample); } }>Valid Example</button>\n          <button onClick={ () => { setMessage(invalidExample); } }>Invalid Example</button>\n\t\t\t\t</div>\n\t\t\t\t{getResultView(result)}\n\t\t\t</div>\n      <div className=\"box\">\n      Description of this webpage\n      </div>\n    </div>\n  );\n}\n\n\nexport default App;\n","export const validExample = `-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nThis message was signed with the private key that is currently active\n-----BEGIN PGP SIGNATURE-----\n\nwsFzBAEBCAAGBQJhv+hxACEJEIrI00XF0ybzFiEEMIXRk1fOMC5FYBFnisjT\nRcXTJvMrtxAAkDuJg3QvYOgK3Mqc6+4RPqmQz2CQe5rtgyltsOh1kqP7OuXb\njPHAHA/g4mu401CdjIi6Drq5FuzC2gzFfojJ8+7NWuAPkSuDqbSxBEoMfR4G\n/f+WCW2xFhihkG3NAQagjYEqG/Dyil/VVsYU+v34GVT2UVW/jhAtsLSv/btW\nXDZLzu5sheksZh4+FQXLokb5I/HXnk6/CaqUOKwhBeZTaWvBevv9XOFd1EXx\ntqrsrYDGsfksooTP7IuewA43uQOCQDQlpoqoDj8+fRuTgS1iyjbo/d7FHUYS\nbGC28GFCVvpKA6PJwNzXM8Brhd60fJpbau0gXkadlzyTRIRgTP5FufwLO4XE\na3Ca1mVXl/Ds6qeEhhDJZtiyGj2BgNfTmi9+e/q0GOkTf5jzL8iPEn+1Z4+R\nge3Iw69ohLt53j0cPemhnoErYbPsmGeJh0hxA464tmnJ7+GDTKYbm76L+eTT\nPtOqBvf9IVhZ0ik14d38mv2iwzKBfaP8UwMHw+2BncCV7Lt1MkMEdHdq6oMZ\nErxJL8nOmHCcPA9RwqftkXBfkkGwSRSoa/RaD9tkNbfQZ/WgHbP9X7SAwR5v\ngv+oDRffMoh1ARpWuTmCWZdsndfC7Lluj1h/F0USLt3xusW/krI5CEjR9Jy+\nThl9rc01iVL520o5uk8Sv4D5/YyjUVhT3mE=\n=PTET\n-----END PGP SIGNATURE-----`;\nexport const invalidExample = `-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nThis message was signed with a different private key\n-----BEGIN PGP SIGNATURE-----\n\nwsFzBAEBCAAGBQJhvjrZACEJEK8WujUv4/UnFiEEqzjuybmkbhVdQLywrxa6\nNS/j9Se6VRAAg/cogw1vDZZQGVouup0vEiz5gBDSMXXlQd/RgqP/ggZHtMkx\nLQCmvvjsWkKE5a2ufblbD9ox3WdwGXJ8ww2GGtWZFdgZ9SjNBbXi5B4p5qBR\nTy9h3DMAowI9g2sD7Gv/eR8UfQvvQ8iWst1FGXyEsQNeGRopy6ucPqST1che\n/9Am+mfonA3Oox935XcszmToQhFCjrhwaZHWlT3JP5wB06iC+WQQ0Q7B1pR4\nkQzXcWVzrxP4E/RrdTXznlI3Sv+f9s0/kHCO401TaApVpZavDnszDZZRc9h6\nWH76y73DZfkfqQGaRvTYR/TWox8mJQodHAdFmC23TTIuDZI/MT8Ab6G4aGiz\n+EAm84jntlTVbhhTduK/wxhYZ0hgNp/IoPl/lEmQVlFb+fjR6XpCEz7HUA20\nATukxvka468g+xTe1lpOlkcET23jZjlFYiRYe1laQfpaOIsiarpmK12t9Zku\niE9PufTjcTtXFdmnTHqtnRMmR9z4v6Op+aGv36YUo1Z6s6T2cCx6W1+NqjB+\nxVUSbvX7/15W0q/PILMmJFHsbo5Z7Mi3q+TgNMckPblBJLAYAbpm36hOBXfD\nZG1Y0tqIc77OmERq1QK/+PW9v3uvNL6tH4AAAtUfg1VFbq43uO5q7+J7sI3f\nrq8Hp7aBVwEd6aDibKatzwjaCpfE0aLwH0U=\n=DNkV\n-----END PGP SIGNATURE-----`;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}