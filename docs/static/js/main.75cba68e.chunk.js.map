{"version":3,"sources":["App.tsx","id_rsa.pub.tsx","example.tsx","reportWebVitals.ts","index.tsx"],"names":["PGPState","GITHUB_URL","FULL_REGEX","BEGIN_PGP_SIGNATURE","MISFORMED_ARMOR_ERROR","getGithubFileURL","filepath","verifyArmorText","armored","armoredSingleLine","replace","test","beginIdx","indexOf","length","message","publicKeyString","a","Error","openpgp","cleartextMessage","signedMessageAsync","publicKeyAsync","armoredKey","Promise","all","signedMessage","publicKey","keyCreationTime","keyPacket","created","valueOf","verifyOptions","verificationKeys","expectSigned","result","signatures","verified","signature","messageSignedTime","packets","packet","AboutBox","className","href","getResultView","params","state","Hidden","Loading","src","alt","Verified","Date","toLocaleString","Failed","error","App","useState","setMessage","setResult","useEffect","checkKey","then","catch","err","onChange","evt","target","value","autoFocus","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75cba68e.chunk.js","sourcesContent":["import React from 'react';\nimport { ReactElement, useState, useEffect } from 'react';\nimport './App.css';\nimport { pubkey } from './id_rsa.pub';\nimport { validExample, invalidExample } from './example';\nimport * as openpgp from 'openpgp';\n\nconst GITHUB_URL = \"https://github.com/1F35C/signature-verifier\";\nconst FULL_REGEX = /-----BEGIN PGP SIGNED MESSAGE-----.*-----BEGIN PGP SIGNATURE-----\\s*[A-Za-z0-9+/=]+\\s*-----END PGP SIGNATURE-----/;\nconst BEGIN_PGP_SIGNATURE = \"-----BEGIN PGP SIGNATURE-----\";\nconst END_PGP_SIGNATURE = \"-----END PGP SIGNATURE-----\";\n\nconst MISFORMED_ARMOR_ERROR = \"Unexpected Message Format\"\n\nfunction getGithubFileURL(filepath: string): string {\n  return GITHUB_URL + '/blob/main/' + filepath;\n};\n\ntype VerifyResult = {\n  verified: boolean;\n  keyCreationTime: number;\n  messageSignedTime: number;\n};\n\nfunction verifyArmorText(armored: string): boolean {\n  const armoredSingleLine = armored.replace(/[\\n\\r]+/g, \"\");\n  if (!FULL_REGEX.test(armoredSingleLine)) {\n    return false;\n  }\n  const beginIdx = armoredSingleLine.indexOf(BEGIN_PGP_SIGNATURE) + BEGIN_PGP_SIGNATURE.length;\n  const endIdx = armoredSingleLine.indexOf(END_PGP_SIGNATURE);\n  return (endIdx - beginIdx) === 761;\n}\n\nasync function checkKey(message: string, publicKeyString: string) : Promise<VerifyResult> {\n  if (!message || message.length === 0) {\n    throw new Error(\"Message is empty\");\n  }\n  \n  // There is a bug in openpgp.js where invalid armor message can throw an error that cannot be\n  // caught, due to an uncaught error inside a promise. So we will verify manually.\n  if (!verifyArmorText(message)) {\n    throw new Error(MISFORMED_ARMOR_ERROR);\n  }\n\n  let signedMessageAsync = await openpgp.readCleartextMessage({ cleartextMessage: message });\n  let publicKeyAsync = openpgp.readKey({ armoredKey: publicKeyString });\n  let [signedMessage, publicKey] = await Promise.all([signedMessageAsync, publicKeyAsync]);\n  let keyCreationTime = publicKey.keyPacket.created.valueOf();\n  let verifyOptions: any = {\n      message: signedMessage,\n      verificationKeys: publicKey,\n      expectSigned: true\n  };\n  let result = await openpgp.verify(verifyOptions);\n  let [verified, signature] = await Promise.all([result.signatures[0].verified, result.signatures[0].signature]);\n\n  var messageSignedTime = 0;\n  if (signature.packets.length > 0) {\n    let packet = signature.packets[0];\n    if (packet.created) {\n      messageSignedTime = packet.created.valueOf();\n    }\n  }\n\n  return {\n    verified: verified,\n    keyCreationTime: keyCreationTime,\n    messageSignedTime: messageSignedTime\n  };\n}\n\nenum PGPState {\n  Hidden,\n  Loading,\n  Verified,\n  Failed\n};\n\ntype PGPResult = {\n  state: PGPState;\n  messageSignedTime: number;\n  keyCreationTime: number;\n  error: string | null;\n};\n\nconst AboutBox = (): JSX.Element => {\n  return (\n    <div className=\"box\">\n      <h2>What?</h2>\n      <p>\n        This is a webpage where you can check whether a message was written by the owner of this repository.\n      </p>\n      <h2>Why?</h2>\n      <p>\n        This page could be useful if I wanted to take credit for this GitHub user in real life without compromising anonymity on the web.\n        For example, I could send a potential customer/employer a signed message that they can verify on this page to verify my authorship.\n      </p>\n      <p>\n        Conversely, no one else will not be able to take credit for this GitHub user account either. (I would first need more work on this account to make that worth doing :P)\n      </p>\n      <h2>How?</h2>\n      <p>\n        This project uses <a href=\"https://en.wikipedia.org/wiki/RSA_(cryptosystem)\">RSA asymmetric cryptography</a> to verify the source of signed messages.\n      </p>\n      <p>\n        First a private/public key pair is generated using RSA.\n        The private key can be used to sign a message, and the public key can be used to verify the message.\n      </p>\n      <p>\n        The private key should be safeguarded, only accessible to the person signing messages.\n        The public key can be sent out to anyone who wants to verify the message, as the public key cannot be used to sign messages.\n        In this case, the public key is embedded to the webpage for easy signature verification.\n      </p>\n      <ul>\n        <li><a href={ getGithubFileURL('generateKeys.js') }>generateKeys.js</a> is used to generate the private/public key pair, storing the private key in a gitignored directory, and updating JS to use the new public key.</li>\n        <li><a href={ getGithubFileURL('generateProof.js') }>generateProof.js</a> is used to generate a message that is signed with a private key.</li>\n      </ul>\n      For more information, here's the <a href={ GITHUB_URL }>repository</a>!\n      <h2>Attributions</h2>\n      <ul>\n        <li><a href=\"https://openpgpjs.org/\">openpgp.js</a> for RSA implementation (key generation/signing/signature verification)</li>\n        <li><a href=\"https://www.svgrepo.com/collection/essential-collection/1\">svgrepo.com</a> for icons</li>\n      </ul>\n    </div>\n  );\n}\n\nconst Loading = (): JSX.Element => {\n  return (\n    <div className=\"box-section centered loading\">\n      <img className=\"icon\" src=\"stopwatch.svg\" alt=\"\"/>\n      <br />\n      <span className=\"status\">\n        Verifying...\n      </span>\n    </div>\n  );\n};\n\nconst Verified = (params: { keyCreationTime: number, messageSignedTime: number }): JSX.Element => {\n  return (\n    <div className=\"box-section centered loading\">\n      <img className=\"icon\" src=\"success.svg\" alt=\"\"/>\n      <br />\n      <span className=\"status\">\n        Verified\n      </span>\n      <br />\n      <span className=\"detail\">\n        Signed on { new Date(params.messageSignedTime).toLocaleString() }\n        <br />\n        Public key created on { new Date(params.keyCreationTime).toLocaleString() }\n      </span>\n    </div>\n  );\n}\n\nconst Failed = (params: { error: string }): JSX.Element => {\n  return (\n    <div className=\"box-section centered loading\">\n      <img className=\"icon\" src=\"error.svg\" alt=\"\"/>\n      <br />\n      <span className=\"status\">\n        Verification Failed\n      </span>\n      <br />\n      <span className=\"detail\">\n        {params.error }\n      </span>\n    </div>\n  );\n}\n\nfunction getResultView(result: PGPResult): JSX.Element {\n  switch (result.state) {\n    case PGPState.Hidden:\n      return (<div className=\"hidden\" />);\n    case PGPState.Loading:\n      return Loading();\n    case PGPState.Verified:\n      return Verified({ messageSignedTime: result.messageSignedTime ?? 0,\n                        keyCreationTime: result.keyCreationTime ?? 0 });\n    case PGPState.Failed:\n      return Failed({ error: result.error ?? \"unknown\" });\n    default:\n      throw new Error('Invalid result value');\n  }\n}\n\nfunction App(): ReactElement {\n  let [message, setMessage] = useState<string>(\"\");\n  let [result, setResult] = useState<PGPResult>({ state: PGPState.Hidden, keyCreationTime: 0, messageSignedTime: 0, error: null});\n\n  useEffect(() => {\n    if (message === \"\") {\n      setResult({ state: PGPState.Hidden, keyCreationTime: 0, messageSignedTime: 0, error: null });\n    } else {\n      setResult({ state: PGPState.Loading, keyCreationTime: 0, messageSignedTime: 0, error: null });\n      checkKey(message, pubkey)\n          .then((result) => {\n            let state = result.verified ? PGPState.Verified : PGPState.Failed;\n            setResult({ state: state, keyCreationTime: result.keyCreationTime, messageSignedTime: result.messageSignedTime, error: null });\n          })\n          .catch((err) => {\n            setResult({ state: PGPState.Failed, keyCreationTime: 0, messageSignedTime: 0, error: err.message });\n          });\n    }\n  }, [message]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"box\">\n\t\t\t\t<div className=\"box-section\">\n\t\t\t\t\t<h1>Signature Verifier</h1>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"box-section\">\n\t\t\t\t\tPlease paste your signed signature below:\n\t\t\t\t\t<textarea className=\"signature-field\" onChange={ (evt) => { setMessage(evt.target.value); } } autoFocus={ true } value={ message } />\n          <button onClick={ () => { setMessage(validExample); } }>Valid Example</button>\n          <button onClick={ () => { setMessage(invalidExample); } }>Invalid Example</button>\n          <button onClick={ () => { setMessage(\"\"); } }>Clear</button>\n\t\t\t\t</div>\n\t\t\t\t{getResultView(result)}\n\t\t\t</div>\n      <AboutBox />\n    </div>\n  );\n}\n\n\nexport default App;\n","export const pubkey = `-----BEGIN PGP PUBLIC KEY BLOCK-----\n\n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\nh3/h/j8KIkpVMB2Vhw==\n=/MVQ\n-----END PGP PUBLIC KEY BLOCK-----\n`;","export const validExample = `-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nThis message was signed with the private key that is currently active\n-----BEGIN PGP SIGNATURE-----\n\nwsFzBAEBCAAGBQJhv+hxACEJEIrI00XF0ybzFiEEMIXRk1fOMC5FYBFnisjT\nRcXTJvMrtxAAkDuJg3QvYOgK3Mqc6+4RPqmQz2CQe5rtgyltsOh1kqP7OuXb\njPHAHA/g4mu401CdjIi6Drq5FuzC2gzFfojJ8+7NWuAPkSuDqbSxBEoMfR4G\n/f+WCW2xFhihkG3NAQagjYEqG/Dyil/VVsYU+v34GVT2UVW/jhAtsLSv/btW\nXDZLzu5sheksZh4+FQXLokb5I/HXnk6/CaqUOKwhBeZTaWvBevv9XOFd1EXx\ntqrsrYDGsfksooTP7IuewA43uQOCQDQlpoqoDj8+fRuTgS1iyjbo/d7FHUYS\nbGC28GFCVvpKA6PJwNzXM8Brhd60fJpbau0gXkadlzyTRIRgTP5FufwLO4XE\na3Ca1mVXl/Ds6qeEhhDJZtiyGj2BgNfTmi9+e/q0GOkTf5jzL8iPEn+1Z4+R\nge3Iw69ohLt53j0cPemhnoErYbPsmGeJh0hxA464tmnJ7+GDTKYbm76L+eTT\nPtOqBvf9IVhZ0ik14d38mv2iwzKBfaP8UwMHw+2BncCV7Lt1MkMEdHdq6oMZ\nErxJL8nOmHCcPA9RwqftkXBfkkGwSRSoa/RaD9tkNbfQZ/WgHbP9X7SAwR5v\ngv+oDRffMoh1ARpWuTmCWZdsndfC7Lluj1h/F0USLt3xusW/krI5CEjR9Jy+\nThl9rc01iVL520o5uk8Sv4D5/YyjUVhT3mE=\n=PTET\n-----END PGP SIGNATURE-----`;\nexport const invalidExample = `-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nThis message was signed with a different private key\n-----BEGIN PGP SIGNATURE-----\n\nwsFzBAEBCAAGBQJhvjrZACEJEK8WujUv4/UnFiEEqzjuybmkbhVdQLywrxa6\nNS/j9Se6VRAAg/cogw1vDZZQGVouup0vEiz5gBDSMXXlQd/RgqP/ggZHtMkx\nLQCmvvjsWkKE5a2ufblbD9ox3WdwGXJ8ww2GGtWZFdgZ9SjNBbXi5B4p5qBR\nTy9h3DMAowI9g2sD7Gv/eR8UfQvvQ8iWst1FGXyEsQNeGRopy6ucPqST1che\n/9Am+mfonA3Oox935XcszmToQhFCjrhwaZHWlT3JP5wB06iC+WQQ0Q7B1pR4\nkQzXcWVzrxP4E/RrdTXznlI3Sv+f9s0/kHCO401TaApVpZavDnszDZZRc9h6\nWH76y73DZfkfqQGaRvTYR/TWox8mJQodHAdFmC23TTIuDZI/MT8Ab6G4aGiz\n+EAm84jntlTVbhhTduK/wxhYZ0hgNp/IoPl/lEmQVlFb+fjR6XpCEz7HUA20\nATukxvka468g+xTe1lpOlkcET23jZjlFYiRYe1laQfpaOIsiarpmK12t9Zku\niE9PufTjcTtXFdmnTHqtnRMmR9z4v6Op+aGv36YUo1Z6s6T2cCx6W1+NqjB+\nxVUSbvX7/15W0q/PILMmJFHsbo5Z7Mi3q+TgNMckPblBJLAYAbpm36hOBXfD\nZG1Y0tqIc77OmERq1QK/+PW9v3uvNL6tH4AAAtUfg1VFbq43uO5q7+J7sI3f\nrq8Hp7aBVwEd6aDibKatzwjaCpfE0aLwH0U=\n=DNkV\n-----END PGP SIGNATURE-----`;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}